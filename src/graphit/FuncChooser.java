/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package graphit;

import GraphPanel.*;
import java.awt.Color;
import java.beans.*;
import java.util.ArrayList;
import javax.swing.*;
import java.lang.Math;

/**
 *
 * @author admin
 */
public class FuncChooser extends javax.swing.JPanel {

    /**
     * Creates new form FuncChooser
     */
    public FuncChooser( GraphPanel newGraphPanel) {
        initComponents();
        //setLayout(new BoxLayout( this, BoxLayout.Y_AXIS ));
        mainGraphPanel = newGraphPanel;
    }
    
    @Override
    public void addPropertyChangeListener( PropertyChangeListener listener ) {
        support.addPropertyChangeListener( listener );
    }
    
    @Override
    public void removePropertyChangeListener( PropertyChangeListener listener ) {
        support.removePropertyChangeListener( listener );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        functionBox = new javax.swing.JComboBox();
        functionLabel = new javax.swing.JLabel();
        sliderPanel = new javax.swing.JPanel();

        functionBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Function Builder", "Line", "Quadratic", "Cubic", "Quartic", "lnX", "Power of E", "Power of X", "X Squared", "X Cubed", "Sine", "Cosine", "Tangent", "Secant", "Cosecant", "Cotangent", "Arcsine", "Arccosine", "Arctangent", "Arcsecant", "Arccosecant", "Arccotangent" }));
        functionBox.setMaximumSize(new java.awt.Dimension(200, 22));
        functionBox.setMinimumSize(new java.awt.Dimension(200, 22));
        functionBox.setPreferredSize(new java.awt.Dimension(200, 22));
        functionBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                functionBoxActionPerformed(evt);
            }
        });

        functionLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        functionLabel.setText(" ");
        functionLabel.setMaximumSize(new java.awt.Dimension(100, 22));
        functionLabel.setMinimumSize(new java.awt.Dimension(100, 22));
        functionLabel.setPreferredSize(new java.awt.Dimension(100, 22));

        sliderPanel.setLayout(new javax.swing.BoxLayout(sliderPanel, javax.swing.BoxLayout.Y_AXIS));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(functionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(functionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(sliderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(functionBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(functionLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(sliderPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void functionBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_functionBoxActionPerformed
        FunctionFramework oldFunc = function;
        sliderPanel.removeAll();
        ArrayList<Parameter> parameters = new ArrayList();
        switch( functionBox.getSelectedIndex() ) {
            case 0: function = new FunctionFramework( (a,b) -> 0.0, (a,b) -> "0.0" );
                    ArrayList<FunctionFramework> functions = new ArrayList();
                    FunctionBuilderDialog builder = new FunctionBuilderDialog( new JFrame(), true, parameters, functions );
                    builder.setVisible( true );
                    function = functions.get(0);
                    for( int i = 0; i < parameters.size(); i++ ) {
                        parameters.get( i ).addPropertyChangeListener(mainGraphPanel);
                        ParamSlider newParamSlider = new ParamSlider( parameters.get( i ) );
                        String newLabel = new String( Character.toChars( Character.codePointAt( new char[] { 'a' }, 0 ) + i) );
                        newParamSlider.setLabel( newLabel );
                        sliderPanel.add( newParamSlider );
                        }
                    break;
            case 1: setupParameters( parameters, 2 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ), 
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                            new FunctionFramework( parameters.get(0), (a,b) -> "a" ),
                            new FunctionFramework( (a,b) -> a, (a,b) -> "x" )),
                        new FunctionFramework( parameters.get(1), (a,b) -> "b"));
                    break;
            case 2: setupParameters( parameters, 3 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                            new FunctionFramework( parameters.get(0), (a,b) -> "a"),
                            new TwoArgumentFunctionFramework( (a,b) -> Math.pow( a, b ), (a,b) -> String.format( "%s<sup>%s</sup>", a, b),
                                new FunctionFramework( (a,b) -> a, (a,b) -> "x"),
                                new FunctionFramework( (a,b) -> 2, (a,b) -> "2") )),
                        new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ), 
                                new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                    new FunctionFramework( parameters.get(1), (a,b) -> "b" ),
                                    new FunctionFramework( (a,b) -> a, (a,b) -> "x" )),
                                new FunctionFramework( parameters.get(2), (a,b) -> "c")));
                    break;
            case 3: setupParameters( parameters, 4 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                            new FunctionFramework( parameters.get(0), (a,b) -> "a"),
                            new TwoArgumentFunctionFramework( (a,b) -> Math.pow( a, b ), (a,b) -> String.format("%s<sup>%s</sup>", a, b),
                                new FunctionFramework( (a,b) -> a, (a,b) -> "x"),
                                new FunctionFramework( (a,b) -> 3, (a,b) -> "3") )),
                        new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                            new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                new FunctionFramework( parameters.get(1), (a,b) -> "b"),
                                new TwoArgumentFunctionFramework( (a,b) -> Math.pow( a, b ), (a,b) -> String.format("%s<sup>%s</sup>", a, b),
                                    new FunctionFramework( (a,b) -> a, (a,b) -> "x"),
                                    new FunctionFramework( (a,b) -> 2, (a,b) -> "2") )),
                            new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ), 
                                    new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                        new FunctionFramework( parameters.get(2), (a,b) -> "c" ),
                                        new FunctionFramework( (a,b) -> a, (a,b) -> "x" )),
                                    new FunctionFramework( parameters.get(3), (a,b) -> "d"))));
                    break;
            case 4: setupParameters( parameters, 5 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                            new FunctionFramework( parameters.get(0), (a,b) -> "a"),
                            new TwoArgumentFunctionFramework( (a,b) -> Math.pow( a, b ), (a,b) -> String.format("%s<sup>%s</sup>", a, b),
                                new FunctionFramework( (a,b) -> a, (a,b) -> "x"),
                                new FunctionFramework( (a,b) -> 4, (a,b) -> "4") )),
                        new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                            new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                new FunctionFramework( parameters.get(1), (a,b) -> "b"),
                                new TwoArgumentFunctionFramework( (a,b) -> Math.pow( a, b ), (a,b) -> String.format("%s<sup>%s</sup>", a, b),
                                    new FunctionFramework( (a,b) -> a, (a,b) -> "x"),
                                    new FunctionFramework( (a,b) -> 3, (a,b) -> "3") )),
                            new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                                new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                    new FunctionFramework( parameters.get(2), (a,b) -> "c"),
                                    new TwoArgumentFunctionFramework( (a,b) -> Math.pow( a, b ), (a,b) -> String.format("%s<sup>%s</sup>", a, b),
                                        new FunctionFramework( (a,b) -> a, (a,b) -> "x"),
                                        new FunctionFramework( (a,b) -> 2, (a,b) -> "2") )),
                                new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ), 
                                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                            new FunctionFramework( parameters.get(3), (a,b) -> "d" ),
                                            new FunctionFramework( (a,b) -> a, (a,b) -> "x" )),
                                        new FunctionFramework( parameters.get(4), (a,b) -> "e")))));
                    break;
            case 5: setupParameters( parameters, 2 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ), 
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                            new FunctionFramework( parameters.get(0), (a,b) -> "a"),
                            new OneArgumentFunctionFramework( (a,b) -> Math.log(a), (a,b) -> "ln" + a,
                                new FunctionFramework( (a,b) -> a, (a,b) -> "x" )
                            )
                        ),
                        new FunctionFramework( parameters.get(1), (a,b) -> "b" )
                    );
                    break;
            case 6: setupParameters( parameters, 2 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new FunctionFramework( parameters.get(0), (a,b) -> "a" ),
                        new OneArgumentFunctionFramework( (a,b) -> Math.exp( a ), (a,b) -> String.format( "e<sup>%s</sup>", a ),
                            new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b,
                                new FunctionFramework( parameters.get(1), (a,b) -> "b" ),
                                new FunctionFramework( (a,b) -> a, (a,b) -> "x" )
                            )
                        )
                    );
                    break;
            case 7: setupParameters( parameters, 2 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new FunctionFramework( parameters.get(0), (a,b) -> "a" ),
                        new TwoArgumentFunctionFramework( (a,b) -> Math.pow(a, b), (a,b) -> String.format("%s<sup>%s</sup>", a, b),
                            new FunctionFramework( (a,b) -> a, (a,b) -> "x" ),
                            new FunctionFramework( parameters.get(1), (a,b) -> "b" )
                        )
                    );
                    break;
            case 8: setupParameters( parameters, 1 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b,
                        new FunctionFramework( parameters.get(0), (a,b) -> "a"),
                        new TwoArgumentFunctionFramework( (a,b) -> Math.pow(a,b), (a,b) -> String.format("%s<sup>%s</sup>", a, b),
                            new FunctionFramework( (a,b) -> a, (a,b) -> "x" ),
                            new FunctionFramework( (a,b) -> 2, (a,b) -> "2" )
                        )
                    );
                    break;
            case 9: setupParameters( parameters, 1 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b,
                        new FunctionFramework( parameters.get(0), (a,b) -> "a"),
                        new TwoArgumentFunctionFramework( (a,b) -> Math.pow(a,b), (a,b) -> String.format("%s<sup>%s</sup>", a, b),
                            new FunctionFramework( (a,b) -> a, (a,b) -> "x" ),
                            new FunctionFramework( (a,b) -> 3, (a,b) -> "3" )
                        )
                    );
                break;
            case 10: setupParameters( parameters, 4 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new FunctionFramework( parameters.get(0), (a,b) -> "a" ),
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b,
                            new FunctionFramework( parameters.get(1), (a,b) -> "b" ),
                            new OneArgumentFunctionFramework( (a,b) -> Math.sin( a ), (a,b) -> String.format( "sin( %s )", a ),
                                new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                                    new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                        new FunctionFramework( parameters.get(2), (a,b) -> "c" ),
                                        new FunctionFramework( (a,b) -> a, (a,b) -> "x")
                                    ),
                                    new FunctionFramework( parameters.get(3), (a,b) -> "d" )
                                )
                            )
                        )
                    );
                    break;
            case 11: setupParameters( parameters, 4 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new FunctionFramework( parameters.get(0), (a,b) -> "a" ),
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b,
                            new FunctionFramework( parameters.get(1), (a,b) -> "b" ),
                            new OneArgumentFunctionFramework( (a,b) -> Math.cos( a ), (a,b) -> String.format( "cos( %s )", a ),
                                new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> a + " + " + b,
                                    new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                        new FunctionFramework( parameters.get(2), (a,b) -> "c" ),
                                        new FunctionFramework( (a,b) -> a, (a,b) -> "x")
                                    ),
                                    new FunctionFramework( parameters.get(3), (a,b) -> "d" )
                                )
                            )
                        )
                    );
                    break;
            case 12: setupParameters( parameters, 4 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new FunctionFramework( parameters.get(0), (a,b) -> "a" ),
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b,
                            new FunctionFramework( parameters.get(1), (a,b) -> "b" ),
                            new OneArgumentFunctionFramework( (a,b) -> Math.tan( a ), (a,b) -> String.format( "tan( %s )", a ),
                                new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                                    new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                        new FunctionFramework( parameters.get(2), (a,b) -> "c" ),
                                        new FunctionFramework( (a,b) -> a, (a,b) -> "x")
                                    ),
                                    new FunctionFramework( parameters.get(3), (a,b) -> "d" )
                                )
                            )
                        )
                    );
                    break;
            case 13: setupParameters( parameters, 4 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new FunctionFramework( parameters.get(0), (a,b) -> "a" ),
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b,
                            new FunctionFramework( parameters.get(1), (a,b) -> "b" ),
                            new OneArgumentFunctionFramework( (a,b) -> 1 / Math.sin( a ), (a,b) -> String.format( "sec( %s )", a ),
                                new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                                    new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                        new FunctionFramework( parameters.get(2), (a,b) -> "c" ),
                                        new FunctionFramework( (a,b) -> a, (a,b) -> "x")
                                    ),
                                    new FunctionFramework( parameters.get(3), (a,b) -> "d" )
                                )
                            )
                        )
                    );
                    break;
            case 14: setupParameters( parameters, 4 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new FunctionFramework( parameters.get(0), (a,b) -> "a" ),
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b,
                            new FunctionFramework( parameters.get(1), (a,b) -> "b" ),
                            new OneArgumentFunctionFramework( (a,b) -> 1 / Math.cos( a ), (a,b) -> String.format( "csc( %s )", a ),
                                new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                                    new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                        new FunctionFramework( parameters.get(2), (a,b) -> "c" ),
                                        new FunctionFramework( (a,b) -> a, (a,b) -> "x")
                                    ),
                                    new FunctionFramework( parameters.get(3), (a,b) -> "d" )
                                )
                            )
                        )
                    );
                    break;
            case 15: setupParameters( parameters, 4 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new FunctionFramework( parameters.get(0), (a,b) -> "a" ),
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b,
                            new FunctionFramework( parameters.get(1), (a,b) -> "b" ),
                            new OneArgumentFunctionFramework( (a,b) -> 1 / Math.tan( a ), (a,b) -> String.format( "cot( %s )", a ),
                                new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                                    new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                        new FunctionFramework( parameters.get(2), (a,b) -> "c" ),
                                        new FunctionFramework( (a,b) -> a, (a,b) -> "x")
                                    ),
                                    new FunctionFramework( parameters.get(3), (a,b) -> "d" )
                                )
                            )
                        )
                    );
                    break;
            case 16: setupParameters( parameters, 4 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new FunctionFramework( parameters.get(0), (a,b) -> "a" ),
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b,
                            new FunctionFramework( parameters.get(1), (a,b) -> "b" ),
                            new OneArgumentFunctionFramework( (a,b) -> Math.asin( a ), (a,b) -> String.format( "Asin( %s )", a ),
                                new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                                    new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                        new FunctionFramework( parameters.get(2), (a,b) -> "c" ),
                                        new FunctionFramework( (a,b) -> a, (a,b) -> "x")
                                    ),
                                    new FunctionFramework( parameters.get(3), (a,b) -> "d" )
                                )
                            )
                        )
                    );
                    break;
            case 17: setupParameters( parameters, 4 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new FunctionFramework( parameters.get(0), (a,b) -> "a" ),
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b,
                            new FunctionFramework( parameters.get(1), (a,b) -> "b" ),
                            new OneArgumentFunctionFramework( (a,b) -> Math.acos( a ), (a,b) -> String.format( "Acos( %s )", a ),
                                new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                                    new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                        new FunctionFramework( parameters.get(2), (a,b) -> "c" ),
                                        new FunctionFramework( (a,b) -> a, (a,b) -> "x")
                                    ),
                                    new FunctionFramework( parameters.get(3), (a,b) -> "d" )
                                )
                            )
                        )
                    );
                    break;
            case 18: setupParameters( parameters, 4 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new FunctionFramework( parameters.get(0), (a,b) -> "a" ),
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b,
                            new FunctionFramework( parameters.get(1), (a,b) -> "b" ),
                            new OneArgumentFunctionFramework( (a,b) -> Math.atan( a ), (a,b) -> String.format( "Atan( %s )", a ),
                                new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                                    new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                        new FunctionFramework( parameters.get(2), (a,b) -> "c" ),
                                        new FunctionFramework( (a,b) -> a, (a,b) -> "x")
                                    ),
                                    new FunctionFramework( parameters.get(3), (a,b) -> "d" )
                                )
                            )
                        )
                    );
                    break;
            case 19: setupParameters( parameters, 4 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new FunctionFramework( parameters.get(0), (a,b) -> "a" ),
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b,
                            new FunctionFramework( parameters.get(1), (a,b) -> "b" ),
                            new OneArgumentFunctionFramework( (a,b) -> 1 / Math.asin( a ), (a,b) -> String.format( "Asec( %s )", a ),
                                new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                                    new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                        new FunctionFramework( parameters.get(2), (a,b) -> "c" ),
                                        new FunctionFramework( (a,b) -> a, (a,b) -> "x")
                                    ),
                                    new FunctionFramework( parameters.get(3), (a,b) -> "d" )
                                )
                            )
                        )
                    );
                    break;
            case 20: setupParameters( parameters, 4 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new FunctionFramework( parameters.get(0), (a,b) -> "a" ),
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b,
                            new FunctionFramework( parameters.get(1), (a,b) -> "b" ),
                            new OneArgumentFunctionFramework( (a,b) -> 1 / Math.acos( a ), (a,b) -> String.format( "Acsc( %s )", a ),
                                new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                                    new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                        new FunctionFramework( parameters.get(2), (a,b) -> "c" ),
                                        new FunctionFramework( (a,b) -> a, (a,b) -> "x")
                                    ),
                                    new FunctionFramework( parameters.get(3), (a,b) -> "d" )
                                )
                            )
                        )
                    );
                    break;
            case 21: setupParameters( parameters, 4 );
                    function = new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                        new FunctionFramework( parameters.get(0), (a,b) -> "a" ),
                        new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b,
                            new FunctionFramework( parameters.get(1), (a,b) -> "b" ),
                            new OneArgumentFunctionFramework( (a,b) -> 1 / Math.atan( a ), (a,b) -> String.format( "Acot( %s )", a ),
                                new TwoArgumentFunctionFramework( (a,b) -> a + b, (a,b) -> String.format( "%s + %s", a, b ),
                                    new TwoArgumentFunctionFramework( (a,b) -> a * b, (a,b) -> a + b, 
                                        new FunctionFramework( parameters.get(2), (a,b) -> "c" ),
                                        new FunctionFramework( (a,b) -> a, (a,b) -> "x")
                                    ),
                                    new FunctionFramework( parameters.get(3), (a,b) -> "d" )
                                )
                            )
                        )
                    );
                    break;
//            case 22: function = new FunctionFramework( (a,b) -> 0, (a,b) -> "0" );
//                    FunctionBuilderDialog builder = new FunctionBuilderDialog( new JFrame(), false, parameters, function );
//                    builder.setVisible( true );
        }
        functionLabel.setText( String.format("<html><i>y</i> = %s</html>", function.getLabelText() ) );
        
        Color newColor = JColorChooser.showDialog( this, "Function Color", function.getColor() );
        if( newColor != null ) {
            function.setColor( newColor );
        }
        support.firePropertyChange( "function", oldFunc, function );
    }//GEN-LAST:event_functionBoxActionPerformed

    public void setFunction( FunctionFramework newFunc  )  {
        function = newFunc;
    }
    
    public FunctionFramework getFunction() {
        return function;
    }
    
    private void setupParameters( ArrayList parameters, int numParameters ) {
        for( int i = 0; i < numParameters; i++ ) {
            Parameter newParam = new Parameter();
            newParam.addPropertyChangeListener(mainGraphPanel);
            parameters.add( newParam );
            ParamSlider newParamSlider = new ParamSlider( newParam );
            String newLabel = new String( Character.toChars( Character.codePointAt( new char[] { 'a' }, 0 ) + i) );
            newParamSlider.setLabel( newLabel );
            sliderPanel.add( newParamSlider );
        }
    }
    
    private FunctionFramework function;
    private GraphPanel mainGraphPanel;
    private PropertyChangeSupport support = new PropertyChangeSupport( this );
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox functionBox;
    private javax.swing.JLabel functionLabel;
    private javax.swing.JPanel sliderPanel;
    // End of variables declaration//GEN-END:variables
}
